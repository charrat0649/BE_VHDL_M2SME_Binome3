-- Copyright (C) 1991-2011 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- PROGRAM		"Quartus II"
-- VERSION		"Version 11.0 Build 208 07/03/2011 Service Pack 1 SJ Web Edition"
-- CREATED		"Tue Oct 19 08:38:19 2021"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY verin_test IS 
	PORT
	(
		clk :  IN  STD_LOGIC;
		chipselect :  IN  STD_LOGIC;
		write_n :  IN  STD_LOGIC;
		reset_n :  IN  STD_LOGIC;
		data_in :  IN  STD_LOGIC;
		address :  IN  STD_LOGIC_VECTOR(2 DOWNTO 0);
		writedata :  IN  STD_LOGIC_VECTOR(31 DOWNTO 0);
		out_pwm :  OUT  STD_LOGIC;
		out_sens :  OUT  STD_LOGIC;
		cs_n :  OUT  STD_LOGIC;
		clk_adc :  OUT  STD_LOGIC;
		readdata :  OUT  STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END verin_test;

ARCHITECTURE bdf_type OF verin_test IS 

COMPONENT pwm_nano
	PORT(clk : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 duty : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 freq : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 out_pwm_nano : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT control_butee
	PORT(pwm_in : IN STD_LOGIC;
		 sens : IN STD_LOGIC;
		 enable : IN STD_LOGIC;
		 angle_barre : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
		 butee_d : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 butee_g : IN STD_LOGIC_VECTOR(15 DOWNTO 0);
		 out_pwm : OUT STD_LOGIC;
		 out_sens : OUT STD_LOGIC;
		 f_g : OUT STD_LOGIC;
		 f_d : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT cs_n_generator
	PORT(clk_1mhz : IN STD_LOGIC;
		 cs_n : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT div_frq_1mhz
	PORT(clk : IN STD_LOGIC;
		 clk_1Mhz : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT shift_register
	PORT(clk_1mhz : IN STD_LOGIC;
		 sig : IN STD_LOGIC;
		 cs_n : IN STD_LOGIC;
		 reg : OUT STD_LOGIC_VECTOR(11 DOWNTO 0)
	);
END COMPONENT;

COMPONENT interface_avalon
	PORT(clk : IN STD_LOGIC;
		 chipselect : IN STD_LOGIC;
		 write_n : IN STD_LOGIC;
		 reset_n : IN STD_LOGIC;
		 fd : IN STD_LOGIC;
		 fg : IN STD_LOGIC;
		 address : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
		 angle_barre : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
		 writedata : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
		 raz_n : OUT STD_LOGIC;
		 enable_pwm : OUT STD_LOGIC;
		 sens : OUT STD_LOGIC;
		 butee_d : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		 butee_g : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		 duty : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		 freq : OUT STD_LOGIC_VECTOR(15 DOWNTO 0);
		 readdata : OUT STD_LOGIC_VECTOR(31 DOWNTO 0)
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_1 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_2 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_4 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_15 :  STD_LOGIC_VECTOR(11 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_7 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_8 :  STD_LOGIC_VECTOR(15 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_16 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_11 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_12 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_13 :  STD_LOGIC;


BEGIN 
cs_n <= SYNTHESIZED_WIRE_11;
clk_adc <= SYNTHESIZED_WIRE_16;



b2v_inst : pwm_nano
PORT MAP(clk => clk,
		 reset_n => SYNTHESIZED_WIRE_0,
		 duty => SYNTHESIZED_WIRE_1,
		 freq => SYNTHESIZED_WIRE_2,
		 out_pwm_nano => SYNTHESIZED_WIRE_3);


b2v_inst1 : control_butee
PORT MAP(pwm_in => SYNTHESIZED_WIRE_3,
		 sens => SYNTHESIZED_WIRE_4,
		 enable => SYNTHESIZED_WIRE_5,
		 angle_barre => SYNTHESIZED_WIRE_15,
		 butee_d => SYNTHESIZED_WIRE_7,
		 butee_g => SYNTHESIZED_WIRE_8,
		 out_pwm => out_pwm,
		 out_sens => out_sens,
		 f_g => SYNTHESIZED_WIRE_13,
		 f_d => SYNTHESIZED_WIRE_12);


b2v_inst2 : cs_n_generator
PORT MAP(clk_1mhz => SYNTHESIZED_WIRE_16,
		 cs_n => SYNTHESIZED_WIRE_11);


b2v_inst3 : div_frq_1mhz
PORT MAP(clk => clk,
		 clk_1Mhz => SYNTHESIZED_WIRE_16);


b2v_inst4 : shift_register
PORT MAP(clk_1mhz => SYNTHESIZED_WIRE_16,
		 sig => data_in,
		 cs_n => SYNTHESIZED_WIRE_11,
		 reg => SYNTHESIZED_WIRE_15);


b2v_inst5 : interface_avalon
PORT MAP(clk => clk,
		 chipselect => chipselect,
		 write_n => write_n,
		 reset_n => reset_n,
		 fd => SYNTHESIZED_WIRE_12,
		 fg => SYNTHESIZED_WIRE_13,
		 address => address,
		 angle_barre => SYNTHESIZED_WIRE_15,
		 writedata => writedata,
		 raz_n => SYNTHESIZED_WIRE_0,
		 enable_pwm => SYNTHESIZED_WIRE_5,
		 sens => SYNTHESIZED_WIRE_4,
		 butee_d => SYNTHESIZED_WIRE_7,
		 butee_g => SYNTHESIZED_WIRE_8,
		 duty => SYNTHESIZED_WIRE_1,
		 freq => SYNTHESIZED_WIRE_2,
		 readdata => readdata);


END bdf_type;