-- Copyright (C) 1991-2011 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- PROGRAM		"Quartus II"
-- VERSION		"Version 11.0 Build 208 07/03/2011 Service Pack 1 SJ Web Edition"
-- CREATED		"Tue Oct 05 09:21:11 2021"

LIBRARY ieee;
USE ieee.std_logic_1164.all; 

LIBRARY work;

ENTITY gestion_anemometre IS 
	PORT
	(
		in_freq_anemometre :  IN  STD_LOGIC;
		clk_50M :  IN  STD_LOGIC;
		continu :  IN  STD_LOGIC;
		start_stop :  IN  STD_LOGIC;
		raz_n :  IN  STD_LOGIC;
		internal_reset :  OUT  STD_LOGIC;
		data_valid :  OUT  STD_LOGIC;
		data_anemometre :  OUT  STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END gestion_anemometre;

ARCHITECTURE bdf_type OF gestion_anemometre IS 

COMPONENT counter
	PORT(clk : IN STD_LOGIC;
		 reset : IN STD_LOGIC;
		 counter : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;

COMPONENT div_frq_1hz
	PORT(clk : IN STD_LOGIC;
		 clk_1hz : OUT STD_LOGIC
	);
END COMPONENT;

COMPONENT choix_mode
	PORT(clk : IN STD_LOGIC;
		 continu : IN STD_LOGIC;
		 start_stop : IN STD_LOGIC;
		 internal_reset : IN STD_LOGIC;
		 data_in : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		 data_valid : OUT STD_LOGIC;
		 data_anemometre : OUT STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
END COMPONENT;

COMPONENT edge_detect
	PORT(clk : IN STD_LOGIC;
		 f_in : IN STD_LOGIC;
		 reset : OUT STD_LOGIC
	);
END COMPONENT;

SIGNAL	SYNTHESIZED_WIRE_0 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_6 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_2 :  STD_LOGIC_VECTOR(7 DOWNTO 0);
SIGNAL	SYNTHESIZED_WIRE_3 :  STD_LOGIC;
SIGNAL	SYNTHESIZED_WIRE_5 :  STD_LOGIC;


BEGIN 
internal_reset <= SYNTHESIZED_WIRE_6;



b2v_inst : counter
PORT MAP(clk => in_freq_anemometre,
		 reset => SYNTHESIZED_WIRE_0,
		 counter => SYNTHESIZED_WIRE_2);


b2v_inst1 : div_frq_1hz
PORT MAP(clk => clk_50M,
		 clk_1hz => SYNTHESIZED_WIRE_5);


b2v_inst4 : choix_mode
PORT MAP(clk => clk_50M,
		 continu => continu,
		 start_stop => start_stop,
		 internal_reset => SYNTHESIZED_WIRE_6,
		 data_in => SYNTHESIZED_WIRE_2,
		 data_valid => data_valid,
		 data_anemometre => data_anemometre);


SYNTHESIZED_WIRE_0 <= SYNTHESIZED_WIRE_3 OR SYNTHESIZED_WIRE_6;


b2v_inst6 : edge_detect
PORT MAP(clk => clk_50M,
		 f_in => SYNTHESIZED_WIRE_5,
		 reset => SYNTHESIZED_WIRE_6);


SYNTHESIZED_WIRE_3 <= NOT(raz_n);



END bdf_type;