
LED.elf:     file format elf32-littlenios2
LED.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004020

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x0000040c memsz 0x0000040c flags r-x
    LOAD off    0x0000142c vaddr 0x0000442c paddr 0x0000451c align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x0000160c vaddr 0x0000460c paddr 0x0000460c align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000003f4  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00004414  00004414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000000f0  0000442c  0000451c  0000142c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  0000460c  0000460c  0000160c  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001c8  00000000  00000000  00001548  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000299  00000000  00000000  00001710  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00002568  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000bb2  00000000  00000000  00003f11  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002473  00000000  00000000  00004ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000220  00000000  00000000  00006f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000ab8  00000000  00000000  00007158  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00000408  00000000  00000000  00007c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000010  00000000  00000000  00008018  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00008028  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00008eda  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  00008edd  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00008ee2  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   0000000b  00000000  00000000  00008ee3  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    0000000b  00000000  00000000  00008eee  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   0000000b  00000000  00000000  00008ef9  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 0000000b  00000000  00000000  00008f04  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 00000046  00000000  00000000  00008f0f  2**0
                  CONTENTS, READONLY
 24 .jdi          000041f0  00000000  00000000  00008f55  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .text	00000000 .text
00004414 l    d  .rodata	00000000 .rodata
0000442c l    d  .rwdata	00000000 .rwdata
0000460c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00004058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000442c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
0000427c l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00004308 g     F .text	0000002c alt_main
00004084 g     F .text	00000090 _puts_r
0000451c g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
0000460c g     O .bss	00000004 errno
00004614 g     O .bss	00000004 alt_argv
0000c50c g       *ABS*	00000000 _gp
00004114 g     F .text	00000014 puts
0000440c g     F .text	00000008 altera_nios2_irq_init
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004510 g     O .rwdata	00000004 _global_impure_ptr
0000461c g       *ABS*	00000000 __bss_end
00004404 g     F .text	00000004 alt_dcache_flush_all
0000451c g       *ABS*	00000000 __ram_rwdata_end
00004334 g     F .text	00000078 write
0000442c g       *ABS*	00000000 __ram_rodata_end
00004514 g     O .rwdata	00000004 jtag_uart_0
0000461c g       *ABS*	00000000 end
00007e80 g       *ABS*	00000000 __alt_stack_pointer
000043d0 g     F .text	00000034 altera_avalon_jtag_uart_write
00004020 g     F .text	0000003c _start
000043ac g     F .text	00000004 alt_sys_init
0000442c g       *ABS*	00000000 __ram_rwdata_start
00004414 g       *ABS*	00000000 __ram_rodata_start
0000461c g       *ABS*	00000000 __alt_stack_base
00004148 g     F .text	000000bc __sfvwrite_small_dev
0000460c g       *ABS*	00000000 __bss_start
0000405c g     F .text	00000028 main
00004618 g     O .bss	00000004 alt_envp
00004518 g     O .rwdata	00000004 alt_errno
00004414 g       *ABS*	00000000 __flash_rodata_start
000043b0 g     F .text	00000020 alt_irq_init
00004204 g     F .text	00000078 _write_r
0000450c g     O .rwdata	00000004 _impure_ptr
00004610 g     O .bss	00000004 alt_argc
00004020 g       *ABS*	00000000 __ram_exceptions_start
0000451c g       *ABS*	00000000 _edata
0000461c g       *ABS*	00000000 _end
00004020 g       *ABS*	00000000 __ram_exceptions_end
0000400c g       .entry	00000000 exit
00007e80 g       *ABS*	00000000 __alt_data_end
0000400c g       .entry	00000000 _exit
00004128 g     F .text	00000020 strlen
00004408 g     F .text	00000004 alt_icache_flush_all
0000429c g     F .text	0000006c alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08500814 	ori	at,at,16416
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .text:

00004020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4024:	dedfa014 	ori	sp,sp,32384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    4028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    402c:	d6b14314 	ori	gp,gp,50444
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4034:	10918314 	ori	r2,r2,17932

    movhi r3, %hi(__bss_end)
    4038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    403c:	18d18714 	ori	r3,r3,17948

    beq r2, r3, 1f
    4040:	10c00326 	beq	r2,r3,4050 <_start+0x30>

0:
    stw zero, (r2)
    4044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    4048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    404c:	10fffd36 	bltu	r2,r3,4044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    4050:	000429c0 	call	429c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    4054:	00043080 	call	4308 <alt_main>

00004058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    4058:	003fff06 	br	4058 <alt_after_alt_main>

0000405c <main>:
#include <stdio.h>

#define Switches (volatile char *) 0x0009000
#define LEDs (volatile char *) 0x0009010
int main()
{
    405c:	deffff04 	addi	sp,sp,-4
  printf("Hello from Nios II!\n");
    4060:	01000034 	movhi	r4,0
    4064:	21110504 	addi	r4,r4,17428
#include <stdio.h>

#define Switches (volatile char *) 0x0009000
#define LEDs (volatile char *) 0x0009010
int main()
{
    4068:	dfc00015 	stw	ra,0(sp)
  printf("Hello from Nios II!\n");
    406c:	00041140 	call	4114 <puts>
    4070:	00e40414 	movui	r3,36880
    4074:	01240014 	movui	r4,36864
while (1)
	*LEDs= *Switches;
    4078:	20800003 	ldbu	r2,0(r4)
    407c:	18800005 	stb	r2,0(r3)
    4080:	003ffd06 	br	4078 <main+0x1c>

00004084 <_puts_r>:
    4084:	defffd04 	addi	sp,sp,-12
    4088:	dc000015 	stw	r16,0(sp)
    408c:	2021883a 	mov	r16,r4
    4090:	2809883a 	mov	r4,r5
    4094:	dfc00215 	stw	ra,8(sp)
    4098:	dc400115 	stw	r17,4(sp)
    409c:	2823883a 	mov	r17,r5
    40a0:	00041280 	call	4128 <strlen>
    40a4:	80c00217 	ldw	r3,8(r16)
    40a8:	02000034 	movhi	r8,0
    40ac:	42105204 	addi	r8,r8,16712
    40b0:	880d883a 	mov	r6,r17
    40b4:	100f883a 	mov	r7,r2
    40b8:	8009883a 	mov	r4,r16
    40bc:	180b883a 	mov	r5,r3
    40c0:	1a000115 	stw	r8,4(r3)
    40c4:	403ee83a 	callr	r8
    40c8:	047fffc4 	movi	r17,-1
    40cc:	8009883a 	mov	r4,r16
    40d0:	01800034 	movhi	r6,0
    40d4:	31910a04 	addi	r6,r6,17448
    40d8:	01c00044 	movi	r7,1
    40dc:	1440071e 	bne	r2,r17,40fc <_puts_r+0x78>
    40e0:	00ffffc4 	movi	r3,-1
    40e4:	1805883a 	mov	r2,r3
    40e8:	dfc00217 	ldw	ra,8(sp)
    40ec:	dc400117 	ldw	r17,4(sp)
    40f0:	dc000017 	ldw	r16,0(sp)
    40f4:	dec00304 	addi	sp,sp,12
    40f8:	f800283a 	ret
    40fc:	81400217 	ldw	r5,8(r16)
    4100:	28c00117 	ldw	r3,4(r5)
    4104:	183ee83a 	callr	r3
    4108:	0007883a 	mov	r3,zero
    410c:	147ff51e 	bne	r2,r17,40e4 <_puts_r+0x60>
    4110:	003ff306 	br	40e0 <_puts_r+0x5c>

00004114 <puts>:
    4114:	00800034 	movhi	r2,0
    4118:	10914304 	addi	r2,r2,17676
    411c:	200b883a 	mov	r5,r4
    4120:	11000017 	ldw	r4,0(r2)
    4124:	00040841 	jmpi	4084 <_puts_r>

00004128 <strlen>:
    4128:	20800007 	ldb	r2,0(r4)
    412c:	10000526 	beq	r2,zero,4144 <strlen+0x1c>
    4130:	2007883a 	mov	r3,r4
    4134:	18c00044 	addi	r3,r3,1
    4138:	18800007 	ldb	r2,0(r3)
    413c:	103ffd1e 	bne	r2,zero,4134 <strlen+0xc>
    4140:	1905c83a 	sub	r2,r3,r4
    4144:	f800283a 	ret

00004148 <__sfvwrite_small_dev>:
    4148:	2880000b 	ldhu	r2,0(r5)
    414c:	defffa04 	addi	sp,sp,-24
    4150:	dcc00315 	stw	r19,12(sp)
    4154:	1080020c 	andi	r2,r2,8
    4158:	dc800215 	stw	r18,8(sp)
    415c:	dc400115 	stw	r17,4(sp)
    4160:	dfc00515 	stw	ra,20(sp)
    4164:	dd000415 	stw	r20,16(sp)
    4168:	dc000015 	stw	r16,0(sp)
    416c:	2825883a 	mov	r18,r5
    4170:	2027883a 	mov	r19,r4
    4174:	3023883a 	mov	r17,r6
    4178:	10002026 	beq	r2,zero,41fc <__sfvwrite_small_dev+0xb4>
    417c:	2940008f 	ldh	r5,2(r5)
    4180:	28000f16 	blt	r5,zero,41c0 <__sfvwrite_small_dev+0x78>
    4184:	01c01b0e 	bge	zero,r7,41f4 <__sfvwrite_small_dev+0xac>
    4188:	3821883a 	mov	r16,r7
    418c:	05010004 	movi	r20,1024
    4190:	00000206 	br	419c <__sfvwrite_small_dev+0x54>
    4194:	0400170e 	bge	zero,r16,41f4 <__sfvwrite_small_dev+0xac>
    4198:	9140008f 	ldh	r5,2(r18)
    419c:	880d883a 	mov	r6,r17
    41a0:	9809883a 	mov	r4,r19
    41a4:	800f883a 	mov	r7,r16
    41a8:	a400010e 	bge	r20,r16,41b0 <__sfvwrite_small_dev+0x68>
    41ac:	01c10004 	movi	r7,1024
    41b0:	00042040 	call	4204 <_write_r>
    41b4:	88a3883a 	add	r17,r17,r2
    41b8:	80a1c83a 	sub	r16,r16,r2
    41bc:	00bff516 	blt	zero,r2,4194 <__sfvwrite_small_dev+0x4c>
    41c0:	9080000b 	ldhu	r2,0(r18)
    41c4:	00ffffc4 	movi	r3,-1
    41c8:	10801014 	ori	r2,r2,64
    41cc:	9080000d 	sth	r2,0(r18)
    41d0:	1805883a 	mov	r2,r3
    41d4:	dfc00517 	ldw	ra,20(sp)
    41d8:	dd000417 	ldw	r20,16(sp)
    41dc:	dcc00317 	ldw	r19,12(sp)
    41e0:	dc800217 	ldw	r18,8(sp)
    41e4:	dc400117 	ldw	r17,4(sp)
    41e8:	dc000017 	ldw	r16,0(sp)
    41ec:	dec00604 	addi	sp,sp,24
    41f0:	f800283a 	ret
    41f4:	0007883a 	mov	r3,zero
    41f8:	003ff506 	br	41d0 <__sfvwrite_small_dev+0x88>
    41fc:	00ffffc4 	movi	r3,-1
    4200:	003ff306 	br	41d0 <__sfvwrite_small_dev+0x88>

00004204 <_write_r>:
    4204:	defffd04 	addi	sp,sp,-12
    4208:	dc000015 	stw	r16,0(sp)
    420c:	04000034 	movhi	r16,0
    4210:	84118304 	addi	r16,r16,17932
    4214:	dc400115 	stw	r17,4(sp)
    4218:	80000015 	stw	zero,0(r16)
    421c:	2023883a 	mov	r17,r4
    4220:	2809883a 	mov	r4,r5
    4224:	300b883a 	mov	r5,r6
    4228:	380d883a 	mov	r6,r7
    422c:	dfc00215 	stw	ra,8(sp)
    4230:	00043340 	call	4334 <write>
    4234:	1007883a 	mov	r3,r2
    4238:	00bfffc4 	movi	r2,-1
    423c:	18800626 	beq	r3,r2,4258 <_write_r+0x54>
    4240:	1805883a 	mov	r2,r3
    4244:	dfc00217 	ldw	ra,8(sp)
    4248:	dc400117 	ldw	r17,4(sp)
    424c:	dc000017 	ldw	r16,0(sp)
    4250:	dec00304 	addi	sp,sp,12
    4254:	f800283a 	ret
    4258:	80800017 	ldw	r2,0(r16)
    425c:	103ff826 	beq	r2,zero,4240 <_write_r+0x3c>
    4260:	88800015 	stw	r2,0(r17)
    4264:	1805883a 	mov	r2,r3
    4268:	dfc00217 	ldw	ra,8(sp)
    426c:	dc400117 	ldw	r17,4(sp)
    4270:	dc000017 	ldw	r16,0(sp)
    4274:	dec00304 	addi	sp,sp,12
    4278:	f800283a 	ret

0000427c <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    427c:	2900051e 	bne	r5,r4,4294 <alt_load_section+0x18>
    4280:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    4284:	20800017 	ldw	r2,0(r4)
    4288:	21000104 	addi	r4,r4,4
    428c:	28800015 	stw	r2,0(r5)
    4290:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    4294:	29bffb1e 	bne	r5,r6,4284 <alt_load_section+0x8>
    4298:	f800283a 	ret

0000429c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    429c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    42a0:	01000034 	movhi	r4,0
    42a4:	21114704 	addi	r4,r4,17692
    42a8:	01400034 	movhi	r5,0
    42ac:	29510b04 	addi	r5,r5,17452
    42b0:	01800034 	movhi	r6,0
    42b4:	31914704 	addi	r6,r6,17692
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    42b8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    42bc:	000427c0 	call	427c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    42c0:	01000034 	movhi	r4,0
    42c4:	21100804 	addi	r4,r4,16416
    42c8:	01400034 	movhi	r5,0
    42cc:	29500804 	addi	r5,r5,16416
    42d0:	01800034 	movhi	r6,0
    42d4:	31900804 	addi	r6,r6,16416
    42d8:	000427c0 	call	427c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    42dc:	01000034 	movhi	r4,0
    42e0:	21110504 	addi	r4,r4,17428
    42e4:	01400034 	movhi	r5,0
    42e8:	29510504 	addi	r5,r5,17428
    42ec:	01800034 	movhi	r6,0
    42f0:	31910b04 	addi	r6,r6,17452
    42f4:	000427c0 	call	427c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    42f8:	00044040 	call	4404 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    42fc:	dfc00017 	ldw	ra,0(sp)
    4300:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    4304:	00044081 	jmpi	4408 <alt_icache_flush_all>

00004308 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4308:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    430c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    4310:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    4314:	00043b00 	call	43b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    4318:	00043ac0 	call	43ac <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    431c:	d1204117 	ldw	r4,-32508(gp)
    4320:	d1604217 	ldw	r5,-32504(gp)
    4324:	d1a04317 	ldw	r6,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    4328:	dfc00017 	ldw	ra,0(sp)
    432c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    4330:	000405c1 	jmpi	405c <main>

00004334 <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4334:	deffff04 	addi	sp,sp,-4
    4338:	2007883a 	mov	r3,r4
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    433c:	00800044 	movi	r2,1
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    4340:	dfc00015 	stw	ra,0(sp)
#endif

    switch (file) {
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
    4344:	000f883a 	mov	r7,zero
    4348:	01000034 	movhi	r4,0
    434c:	21114504 	addi	r4,r4,17684
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    4350:	18800526 	beq	r3,r2,4368 <write+0x34>
    4354:	00800084 	movi	r2,2
    4358:	1880061e 	bne	r3,r2,4374 <write+0x40>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    435c:	01000034 	movhi	r4,0
    4360:	21114504 	addi	r4,r4,17684
    4364:	000f883a 	mov	r7,zero
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
        return -1;
    }
}
    4368:	dfc00017 	ldw	ra,0(sp)
    436c:	dec00104 	addi	sp,sp,4
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    4370:	00043d01 	jmpi	43d0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    4374:	00800034 	movhi	r2,0
    4378:	10914604 	addi	r2,r2,17688
    437c:	10800017 	ldw	r2,0(r2)
    4380:	00c00034 	movhi	r3,0
    4384:	18d18304 	addi	r3,r3,17932
    4388:	10000226 	beq	r2,zero,4394 <write+0x60>
    438c:	103ee83a 	callr	r2
    4390:	1007883a 	mov	r3,r2
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    4394:	00801444 	movi	r2,81
    4398:	18800015 	stw	r2,0(r3)
        return -1;
    }
}
    439c:	00bfffc4 	movi	r2,-1
    43a0:	dfc00017 	ldw	ra,0(sp)
    43a4:	dec00104 	addi	sp,sp,4
    43a8:	f800283a 	ret

000043ac <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
    43ac:	f800283a 	ret

000043b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    43b0:	deffff04 	addi	sp,sp,-4
    43b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    43b8:	000440c0 	call	440c <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    43bc:	00800044 	movi	r2,1
    43c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    43c4:	dfc00017 	ldw	ra,0(sp)
    43c8:	dec00104 	addi	sp,sp,4
    43cc:	f800283a 	ret

000043d0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    43d0:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    43d4:	298f883a 	add	r7,r5,r6
    43d8:	20c00104 	addi	r3,r4,4
    43dc:	00000606 	br	43f8 <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    43e0:	18800037 	ldwio	r2,0(r3)
    43e4:	10bfffec 	andhi	r2,r2,65535
    43e8:	10000326 	beq	r2,zero,43f8 <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    43ec:	28800007 	ldb	r2,0(r5)
    43f0:	29400044 	addi	r5,r5,1
    43f4:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    43f8:	29fff936 	bltu	r5,r7,43e0 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    43fc:	3005883a 	mov	r2,r6
    4400:	f800283a 	ret

00004404 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    4404:	f800283a 	ret

00004408 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    4408:	f800283a 	ret

0000440c <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    440c:	000170fa 	wrctl	ienable,zero
}
    4410:	f800283a 	ret
